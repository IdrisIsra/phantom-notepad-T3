import type { NextPage } from "next";
import Head from "next/head";
import { useState, useEffect, useRef } from "react";
import { trpc } from "../../utils/trpc";

const NotepadPage: NextPage = () => {
  const [message, setMessage] = useState("");
  const inputRef = useRef<HTMLTextAreaElement>(null);
  const [selection, setSelection] = useState({ start: 0, end: 0 });

  const addMessage = trpc.message.add.useMutation();
  const { status, data } = trpc.message.getText.useQuery();

  useEffect(() => {
    if (status === "success" && data) {
      setMessage(data);
    }
  }, [status, data]);

  trpc.message.onAdd.useSubscription(undefined, {
    onData(newMessage) {
      // const currentText = message;
      // const newText =
      //   currentText?.slice(0, newMessage.selectionStart) +
      //   newMessage.text +
      //   currentText?.slice(newMessage.selectionEnd);
      // console.log(newText);
      setMessage((oldMessage) => {
        return (
          oldMessage?.slice(0, newMessage.selectionStart) +
          newMessage.text +
          oldMessage?.slice(newMessage.selectionEnd)
        );
      });

      console.log(newMessage);
      // inputRef?.current?.setSelectionRange(selection.start, selection.end);
    },
    onError(err) {
      console.error("Subscription error:", err);
    },
  });

  async function handleInput(e: React.ChangeEvent<HTMLTextAreaElement>) {
    console.log(e);
    const selectionStart = selection.start;
    const selectionEnd = selection.end;
    const character = e.target.value[e.target.selectionStart - 1];

    if (!character) return;

    const input = {
      selectionStart: selectionStart,
      selectionEnd: selectionEnd,
      text: character,
    };

    try {
      await addMessage.mutateAsync(input);
    } catch {}

    console.log("Selection start: ");
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-start gap-10 p-4">
        <h1 className="text-4xl font-extrabold leading-normal text-neutral-100 md:text-[5rem]">
          Phantom <span className="text-rose-500">Notepad</span>
        </h1>
        <div className="flex w-full justify-center gap-2 lg:w-1/2">
          <textarea
            ref={inputRef}
            className="h-[550px] grow rounded p-5 "
            value={message}
            onChange={handleInput}
            onSelect={(e) => {
              console.log(e.currentTarget.selectionStart);
              console.log(e.currentTarget.selectionEnd);
              setSelection({
                start: e.currentTarget.selectionStart || 0,
                end: e.currentTarget.selectionEnd || 0,
              });
            }}
            maxLength={1500}
          />
        </div>
      </main>
    </>
  );
};

export default NotepadPage;
